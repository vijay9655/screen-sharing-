{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\screen sharing\\\\screen-sharing-\\\\client\\\\src\\\\routes\\\\Room.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = props => {\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const peerRef = useRef();\n  const socketRef = useRef();\n  const otherUser = useRef();\n  const userStream = useRef();\n  const senders = useRef([]);\n  useEffect(() => {}, []);\n\n  const callback = () => {};\n\n  const callUser = userID => {\n    peerRef.current = createPeer(userID);\n    userStream.current.getTracks().forEach(track => senders.current.push(peerRef.current.addTrack(track, userStream.current)));\n  };\n\n  const createPeer = userID => {\n    const peer = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.stunprotocol.org\"\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }]\n    });\n    peer.onicecandidate = handleICECandidateEvent;\n    peer.ontrack = handleTrackEvent;\n\n    peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n    return peer;\n  };\n\n  const handleNegotiationNeededEvent = userID => {\n    peerRef.current.createOffer().then(offer => {\n      return peerRef.current.setLocalDescription(offer);\n    }).then(() => {\n      const payload = {\n        target: userID,\n        caller: socketRef.current.id,\n        sdp: peerRef.current.localDescription\n      };\n      socketRef.current.emit(\"offer\", payload);\n    }).catch(e => console.log(e));\n  };\n\n  const handleRecieveCall = incoming => {\n    peerRef.current = createPeer();\n    const desc = new RTCSessionDescription(incoming.sdp);\n    peerRef.current.setRemoteDescription(desc).then(() => {\n      userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n    }).then(() => {\n      return peerRef.current.createAnswer();\n    }).then(answer => {\n      return peerRef.current.setLocalDescription(answer);\n    }).then(() => {\n      const payload = {\n        target: incoming.caller,\n        caller: socketRef.current.id,\n        sdp: peerRef.current.localDescription\n      };\n      socketRef.current.emit(\"answer\", payload);\n    });\n  };\n\n  const handleAnswer = message => {\n    const desc = new RTCSessionDescription(message.sdp);\n    peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n  };\n\n  const handleICECandidateEvent = e => {\n    if (e.candidate) {\n      const payload = {\n        target: otherUser.current,\n        candidate: e.candidate\n      };\n      socketRef.current.emit(\"ice-candidate\", payload);\n    }\n  };\n\n  const handleNewICECandidateMsg = incoming => {\n    const candidate = new RTCIceCandidate(incoming);\n    peerRef.current.addIceCandidate(candidate).catch(e => console.log(e));\n  };\n\n  const handleTrackEvent = e => {\n    partnerVideo.current.srcObject = e.streams[0];\n  };\n\n  function shareScreen() {\n    navigator.mediaDevices.getDisplayMedia({\n      cursor: true\n    }).then(stream => {\n      const screenTrack = stream.getTracks()[0];\n      senders.current.find(sender => sender.track.kind === 'video').replaceTrack(screenTrack);\n\n      screenTrack.onended = function () {\n        senders.current.find(sender => sender.track.kind === \"video\").replaceTrack(userStream.current.getTracks()[1]);\n      };\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    controls: true,\n    style: {\n      height: 500,\n      width: 500\n    },\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    controls: true,\n    style: {\n      height: 500,\n      width: 500\n    },\n    autoPlay: true,\n    ref: partnerVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: shareScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 13\n    }\n  }, \"Share screen\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["C:/react/screen sharing/screen-sharing-/client/src/routes/Room.js"],"names":["React","useRef","useEffect","io","Room","props","userVideo","partnerVideo","peerRef","socketRef","otherUser","userStream","senders","callback","callUser","userID","current","createPeer","getTracks","forEach","track","push","addTrack","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","then","offer","setLocalDescription","payload","target","caller","id","sdp","localDescription","emit","catch","e","console","log","handleRecieveCall","incoming","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","handleAnswer","message","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","srcObject","streams","shareScreen","navigator","mediaDevices","getDisplayMedia","cursor","stream","screenTrack","find","sender","kind","replaceTrack","onended","height","width"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,QAAyC,OAAzC;AACA,OAAOC,EAAP,MAAe,kBAAf;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AACpB,QAAMC,SAAS,GAAGL,MAAM,EAAxB;AACA,QAAMM,YAAY,GAAGN,MAAM,EAA3B;AACA,QAAMO,OAAO,GAAGP,MAAM,EAAtB;AACA,QAAMQ,SAAS,GAAGR,MAAM,EAAxB;AACA,QAAMS,SAAS,GAAGT,MAAM,EAAxB;AACA,QAAMU,UAAU,GAAGV,MAAM,EAAzB;AACA,QAAMW,OAAO,GAAGX,MAAM,CAAC,EAAD,CAAtB;AAEAC,EAAAA,SAAS,CAAC,MAAM,CAGf,CAHQ,EAGN,EAHM,CAAT;;AAIA,QAAMW,QAAQ,GAAC,MAAI,CAElB,CAFD;;AAIA,QAAMC,QAAQ,GAAEC,MAAD,IAAW;AACtBP,IAAAA,OAAO,CAACQ,OAAR,GAAkBC,UAAU,CAACF,MAAD,CAA5B;AACAJ,IAAAA,UAAU,CAACK,OAAX,CAAmBE,SAAnB,GAA+BC,OAA/B,CAAuCC,KAAK,IAAIR,OAAO,CAACI,OAAR,CAAgBK,IAAhB,CAAqBb,OAAO,CAACQ,OAAR,CAAgBM,QAAhB,CAAyBF,KAAzB,EAAgCT,UAAU,CAACK,OAA3C,CAArB,CAAhD;AACH,GAHD;;AAKA,QAAMC,UAAU,GAAEF,MAAD,IAAW;AACxB,UAAMQ,IAAI,GAAG,IAAIC,iBAAJ,CAAsB;AAC/BC,MAAAA,UAAU,EAAE,CACR;AACIC,QAAAA,IAAI,EAAE;AADV,OADQ,EAIR;AACIA,QAAAA,IAAI,EAAE,uBADV;AAEIC,QAAAA,UAAU,EAAE,QAFhB;AAGIC,QAAAA,QAAQ,EAAE;AAHd,OAJQ;AADmB,KAAtB,CAAb;AAaAL,IAAAA,IAAI,CAACM,cAAL,GAAsBC,uBAAtB;AACAP,IAAAA,IAAI,CAACQ,OAAL,GAAeC,gBAAf;;AACAT,IAAAA,IAAI,CAACU,mBAAL,GAA2B,MAAMC,4BAA4B,CAACnB,MAAD,CAA7D;;AAEA,WAAOQ,IAAP;AACH,GAnBD;;AAqBA,QAAMW,4BAA4B,GAAEnB,MAAD,IAAW;AAC1CP,IAAAA,OAAO,CAACQ,OAAR,CAAgBmB,WAAhB,GAA8BC,IAA9B,CAAmCC,KAAK,IAAI;AACxC,aAAO7B,OAAO,CAACQ,OAAR,CAAgBsB,mBAAhB,CAAoCD,KAApC,CAAP;AACH,KAFD,EAEGD,IAFH,CAEQ,MAAM;AACV,YAAMG,OAAO,GAAG;AACZC,QAAAA,MAAM,EAAEzB,MADI;AAEZ0B,QAAAA,MAAM,EAAEhC,SAAS,CAACO,OAAV,CAAkB0B,EAFd;AAGZC,QAAAA,GAAG,EAAEnC,OAAO,CAACQ,OAAR,CAAgB4B;AAHT,OAAhB;AAKAnC,MAAAA,SAAS,CAACO,OAAV,CAAkB6B,IAAlB,CAAuB,OAAvB,EAAgCN,OAAhC;AACH,KATD,EASGO,KATH,CASSC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CATd;AAUH,GAXD;;AAaA,QAAMG,iBAAiB,GAAEC,QAAD,IAAa;AACjC3C,IAAAA,OAAO,CAACQ,OAAR,GAAkBC,UAAU,EAA5B;AACA,UAAMmC,IAAI,GAAG,IAAIC,qBAAJ,CAA0BF,QAAQ,CAACR,GAAnC,CAAb;AACAnC,IAAAA,OAAO,CAACQ,OAAR,CAAgBsC,oBAAhB,CAAqCF,IAArC,EAA2ChB,IAA3C,CAAgD,MAAM;AAClDzB,MAAAA,UAAU,CAACK,OAAX,CAAmBE,SAAnB,GAA+BC,OAA/B,CAAuCC,KAAK,IAAIZ,OAAO,CAACQ,OAAR,CAAgBM,QAAhB,CAAyBF,KAAzB,EAAgCT,UAAU,CAACK,OAA3C,CAAhD;AACH,KAFD,EAEGoB,IAFH,CAEQ,MAAM;AACV,aAAO5B,OAAO,CAACQ,OAAR,CAAgBuC,YAAhB,EAAP;AACH,KAJD,EAIGnB,IAJH,CAIQoB,MAAM,IAAI;AACd,aAAOhD,OAAO,CAACQ,OAAR,CAAgBsB,mBAAhB,CAAoCkB,MAApC,CAAP;AACH,KAND,EAMGpB,IANH,CAMQ,MAAM;AACV,YAAMG,OAAO,GAAG;AACZC,QAAAA,MAAM,EAAEW,QAAQ,CAACV,MADL;AAEZA,QAAAA,MAAM,EAAEhC,SAAS,CAACO,OAAV,CAAkB0B,EAFd;AAGZC,QAAAA,GAAG,EAAEnC,OAAO,CAACQ,OAAR,CAAgB4B;AAHT,OAAhB;AAKAnC,MAAAA,SAAS,CAACO,OAAV,CAAkB6B,IAAlB,CAAuB,QAAvB,EAAiCN,OAAjC;AACH,KAbD;AAcH,GAjBD;;AAmBA,QAAMkB,YAAY,GAAEC,OAAD,IAAY;AAC3B,UAAMN,IAAI,GAAG,IAAIC,qBAAJ,CAA0BK,OAAO,CAACf,GAAlC,CAAb;AACAnC,IAAAA,OAAO,CAACQ,OAAR,CAAgBsC,oBAAhB,CAAqCF,IAArC,EAA2CN,KAA3C,CAAiDC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CAAtD;AACH,GAHD;;AAKA,QAAMjB,uBAAuB,GAAEiB,CAAD,IAAM;AAChC,QAAIA,CAAC,CAACY,SAAN,EAAiB;AACb,YAAMpB,OAAO,GAAG;AACZC,QAAAA,MAAM,EAAE9B,SAAS,CAACM,OADN;AAEZ2C,QAAAA,SAAS,EAAEZ,CAAC,CAACY;AAFD,OAAhB;AAIAlD,MAAAA,SAAS,CAACO,OAAV,CAAkB6B,IAAlB,CAAuB,eAAvB,EAAwCN,OAAxC;AACH;AACJ,GARD;;AAUA,QAAMqB,wBAAwB,GAAET,QAAD,IAAa;AACxC,UAAMQ,SAAS,GAAG,IAAIE,eAAJ,CAAoBV,QAApB,CAAlB;AAEA3C,IAAAA,OAAO,CAACQ,OAAR,CAAgB8C,eAAhB,CAAgCH,SAAhC,EACKb,KADL,CACWC,CAAC,IAAIC,OAAO,CAACC,GAAR,CAAYF,CAAZ,CADhB;AAEH,GALD;;AAOA,QAAMf,gBAAgB,GAAEe,CAAD,IAAM;AACzBxC,IAAAA,YAAY,CAACS,OAAb,CAAqB+C,SAArB,GAAiChB,CAAC,CAACiB,OAAF,CAAU,CAAV,CAAjC;AACH,GAFD;;AAIA,WAASC,WAAT,GAAuB;AACnBC,IAAAA,SAAS,CAACC,YAAV,CAAuBC,eAAvB,CAAuC;AAAEC,MAAAA,MAAM,EAAE;AAAV,KAAvC,EAAyDjC,IAAzD,CAA8DkC,MAAM,IAAI;AACpE,YAAMC,WAAW,GAAGD,MAAM,CAACpD,SAAP,GAAmB,CAAnB,CAApB;AACAN,MAAAA,OAAO,CAACI,OAAR,CAAgBwD,IAAhB,CAAqBC,MAAM,IAAIA,MAAM,CAACrD,KAAP,CAAasD,IAAb,KAAsB,OAArD,EAA8DC,YAA9D,CAA2EJ,WAA3E;;AACAA,MAAAA,WAAW,CAACK,OAAZ,GAAsB,YAAW;AAC7BhE,QAAAA,OAAO,CAACI,OAAR,CAAgBwD,IAAhB,CAAqBC,MAAM,IAAIA,MAAM,CAACrD,KAAP,CAAasD,IAAb,KAAsB,OAArD,EAA8DC,YAA9D,CAA2EhE,UAAU,CAACK,OAAX,CAAmBE,SAAnB,GAA+B,CAA/B,CAA3E;AACH,OAFD;AAGH,KAND;AAOH;;AAED,sBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,KAAK,EAAE;AAAC2D,MAAAA,MAAM,EAAE,GAAT;AAAcC,MAAAA,KAAK,EAAE;AAArB,KAAvB;AAAkD,IAAA,QAAQ,MAA1D;AAA2D,IAAA,GAAG,EAAExE,SAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAEI;AAAO,IAAA,QAAQ,MAAf;AAAgB,IAAA,KAAK,EAAE;AAACuE,MAAAA,MAAM,EAAE,GAAT;AAAcC,MAAAA,KAAK,EAAE;AAArB,KAAvB;AAAkD,IAAA,QAAQ,MAA1D;AAA2D,IAAA,GAAG,EAAEvE,YAAhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,eAGI;AAAQ,IAAA,OAAO,EAAE0D,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHJ,CADJ;AAOH,CAtHD;;AAwHA,eAAe7D,IAAf","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst Room = (props) => {\r\n    const userVideo = useRef();\r\n    const partnerVideo = useRef();\r\n    const peerRef = useRef();\r\n    const socketRef = useRef();\r\n    const otherUser = useRef();\r\n    const userStream = useRef();\r\n    const senders = useRef([]);\r\n\r\n    useEffect(() => {\r\n       \r\n\r\n    }, []);\r\n    const callback=()=>{\r\n        \r\n    }\r\n\r\n    const callUser=(userID)=> {\r\n        peerRef.current = createPeer(userID);\r\n        userStream.current.getTracks().forEach(track => senders.current.push(peerRef.current.addTrack(track, userStream.current)));\r\n    }\r\n\r\n    const createPeer=(userID)=> {\r\n        const peer = new RTCPeerConnection({\r\n            iceServers: [\r\n                {\r\n                    urls: \"stun:stun.stunprotocol.org\"\r\n                },\r\n                {\r\n                    urls: 'turn:numb.viagenie.ca',\r\n                    credential: 'muazkh',\r\n                    username: 'webrtc@live.com'\r\n                },\r\n            ]\r\n        });\r\n\r\n        peer.onicecandidate = handleICECandidateEvent;\r\n        peer.ontrack = handleTrackEvent;\r\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n\r\n        return peer;\r\n    }\r\n\r\n    const handleNegotiationNeededEvent=(userID)=> {\r\n        peerRef.current.createOffer().then(offer => {\r\n            return peerRef.current.setLocalDescription(offer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: userID,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            };\r\n            socketRef.current.emit(\"offer\", payload);\r\n        }).catch(e => console.log(e));\r\n    }\r\n\r\n    const handleRecieveCall=(incoming)=> {\r\n        peerRef.current = createPeer();\r\n        const desc = new RTCSessionDescription(incoming.sdp);\r\n        peerRef.current.setRemoteDescription(desc).then(() => {\r\n            userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\r\n        }).then(() => {\r\n            return peerRef.current.createAnswer();\r\n        }).then(answer => {\r\n            return peerRef.current.setLocalDescription(answer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: incoming.caller,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            }\r\n            socketRef.current.emit(\"answer\", payload);\r\n        })\r\n    }\r\n\r\n    const handleAnswer=(message)=> {\r\n        const desc = new RTCSessionDescription(message.sdp);\r\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\r\n    }\r\n\r\n    const handleICECandidateEvent=(e)=> {\r\n        if (e.candidate) {\r\n            const payload = {\r\n                target: otherUser.current,\r\n                candidate: e.candidate,\r\n            }\r\n            socketRef.current.emit(\"ice-candidate\", payload);\r\n        }\r\n    }\r\n\r\n    const handleNewICECandidateMsg=(incoming)=> {\r\n        const candidate = new RTCIceCandidate(incoming);\r\n\r\n        peerRef.current.addIceCandidate(candidate)\r\n            .catch(e => console.log(e));\r\n    }\r\n\r\n    const handleTrackEvent=(e)=> {\r\n        partnerVideo.current.srcObject = e.streams[0];\r\n    };\r\n\r\n    function shareScreen() {\r\n        navigator.mediaDevices.getDisplayMedia({ cursor: true }).then(stream => {\r\n            const screenTrack = stream.getTracks()[0];\r\n            senders.current.find(sender => sender.track.kind === 'video').replaceTrack(screenTrack);\r\n            screenTrack.onended = function() {\r\n                senders.current.find(sender => sender.track.kind === \"video\").replaceTrack(userStream.current.getTracks()[1]);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <video controls style={{height: 500, width: 500}} autoPlay ref={userVideo} />\r\n            <video controls style={{height: 500, width: 500}} autoPlay ref={partnerVideo} />\r\n            <button onClick={shareScreen}>Share screen</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;"]},"metadata":{},"sourceType":"module"}