{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\screen sharing\\\\screen-sharing-\\\\client\\\\src\\\\routes\\\\Room.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = props => {\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const peerRef = useRef();\n  const socketRef = useRef();\n  const otherUser = useRef();\n  const userStream = useRef();\n  const senders = useRef([]);\n  useEffect(() => {\n    const callUser = userID => {\n      peerRef.current = createPeer(userID);\n      userStream.current.getTracks().forEach(track => senders.current.push(peerRef.current.addTrack(track, userStream.current)));\n    };\n\n    const createPeer = userID => {\n      const peer = new RTCPeerConnection({\n        iceServers: [{\n          urls: \"stun:stun.stunprotocol.org\"\n        }, {\n          urls: 'turn:numb.viagenie.ca',\n          credential: 'muazkh',\n          username: 'webrtc@live.com'\n        }]\n      });\n      peer.onicecandidate = handleICECandidateEvent;\n      peer.ontrack = handleTrackEvent;\n\n      peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n      return peer;\n    };\n\n    const handleNegotiationNeededEvent = userID => {\n      peerRef.current.createOffer().then(offer => {\n        return peerRef.current.setLocalDescription(offer);\n      }).then(() => {\n        const payload = {\n          target: userID,\n          caller: socketRef.current.id,\n          sdp: peerRef.current.localDescription\n        };\n        socketRef.current.emit(\"offer\", payload);\n      }).catch(e => console.log(e));\n    };\n\n    const handleRecieveCall = incoming => {\n      peerRef.current = createPeer();\n      const desc = new RTCSessionDescription(incoming.sdp);\n      peerRef.current.setRemoteDescription(desc).then(() => {\n        userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\n      }).then(() => {\n        return peerRef.current.createAnswer();\n      }).then(answer => {\n        return peerRef.current.setLocalDescription(answer);\n      }).then(() => {\n        const payload = {\n          target: incoming.caller,\n          caller: socketRef.current.id,\n          sdp: peerRef.current.localDescription\n        };\n        socketRef.current.emit(\"answer\", payload);\n      });\n    };\n\n    const handleAnswer = message => {\n      const desc = new RTCSessionDescription(message.sdp);\n      peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n    };\n\n    const handleICECandidateEvent = e => {\n      if (e.candidate) {\n        const payload = {\n          target: otherUser.current,\n          candidate: e.candidate\n        };\n        socketRef.current.emit(\"ice-candidate\", payload);\n      }\n    };\n\n    const handleNewICECandidateMsg = incoming => {\n      const candidate = new RTCIceCandidate(incoming);\n      peerRef.current.addIceCandidate(candidate).catch(e => console.log(e));\n    };\n\n    const handleTrackEvent = e => {\n      partnerVideo.current.srcObject = e.streams[0];\n    };\n\n    try {\n      navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      }).then(stream => {\n        userVideo.current.srcObject = stream;\n        userStream.current = stream;\n        socketRef.current = io.connect(\"/\");\n        socketRef.current.emit(\"join room\", props.match.params.roomID);\n        console.log('room id', props.match.params.roomID);\n        socketRef.current.on('other user', userID => {\n          callUser(userID);\n          otherUser.current = userID;\n        });\n        socketRef.current.on(\"user joined\", userID => {\n          otherUser.current = userID;\n        });\n        socketRef.current.on(\"offer\", handleRecieveCall);\n        socketRef.current.on(\"answer\", handleAnswer);\n        socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n      });\n    } catch (err) {\n      console.error(`${err.name}: ${err.message}`);\n    }\n  })[props.match.params.roomID];\n\n  const shareScreen = () => {\n    try {\n      navigator.mediaDevices.getDisplayMedia({\n        cursor: true\n      }).then(stream => {\n        const screenTrack = stream.getTracks()[0];\n        senders.current.find(sender => sender.track.kind === 'video').replaceTrack(screenTrack);\n\n        screenTrack.onended = function () {\n          senders.current.find(sender => sender.track.kind === \"video\").replaceTrack(userStream.current.getTracks()[1]);\n        };\n      });\n    } catch (err) {\n      console.error(`${err.name}: ${err.message}`);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    controls: true,\n    style: {\n      height: 500,\n      width: 500\n    },\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    controls: true,\n    style: {\n      height: 500,\n      width: 500\n    },\n    autoPlay: true,\n    ref: partnerVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: shareScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 13\n    }\n  }, \"Share screen\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["C:/react/screen sharing/screen-sharing-/client/src/routes/Room.js"],"names":["React","useRef","useEffect","io","Room","props","userVideo","partnerVideo","peerRef","socketRef","otherUser","userStream","senders","callUser","userID","current","createPeer","getTracks","forEach","track","push","addTrack","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","then","offer","setLocalDescription","payload","target","caller","id","sdp","localDescription","emit","catch","e","console","log","handleRecieveCall","incoming","desc","RTCSessionDescription","setRemoteDescription","createAnswer","answer","handleAnswer","message","candidate","handleNewICECandidateMsg","RTCIceCandidate","addIceCandidate","srcObject","streams","navigator","mediaDevices","getUserMedia","audio","video","stream","connect","match","params","roomID","on","err","error","name","shareScreen","getDisplayMedia","cursor","screenTrack","find","sender","kind","replaceTrack","onended","height","width"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst Room = (props) => {\r\n    const userVideo = useRef();\r\n    const partnerVideo = useRef();\r\n    const peerRef = useRef();\r\n    const socketRef = useRef();\r\n    const otherUser = useRef();\r\n    const userStream = useRef();\r\n    const senders = useRef([]);\r\n    useEffect(() => {\r\n        const callUser=(userID)=> {\r\n            peerRef.current = createPeer(userID);\r\n            userStream.current.getTracks().forEach(track => senders.current.push(peerRef.current.addTrack(track, userStream.current)));\r\n        }\r\n    \r\n        const createPeer=(userID)=> {\r\n            const peer = new RTCPeerConnection({\r\n                iceServers: [\r\n                    {\r\n                        urls: \"stun:stun.stunprotocol.org\"\r\n                    },\r\n                    {\r\n                        urls: 'turn:numb.viagenie.ca',\r\n                        credential: 'muazkh',\r\n                        username: 'webrtc@live.com'\r\n                    },\r\n                ]\r\n            });\r\n    \r\n            peer.onicecandidate = handleICECandidateEvent;\r\n            peer.ontrack = handleTrackEvent;\r\n            peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n    \r\n            return peer;\r\n        }\r\n    \r\n        const handleNegotiationNeededEvent=(userID)=> {\r\n            peerRef.current.createOffer().then(offer => {\r\n                return peerRef.current.setLocalDescription(offer);\r\n            }).then(() => {\r\n                const payload = {\r\n                    target: userID,\r\n                    caller: socketRef.current.id,\r\n                    sdp: peerRef.current.localDescription\r\n                };\r\n                socketRef.current.emit(\"offer\", payload);\r\n            }).catch(e => console.log(e));\r\n        }\r\n    \r\n        const handleRecieveCall=(incoming)=> {\r\n            peerRef.current = createPeer();\r\n            const desc = new RTCSessionDescription(incoming.sdp);\r\n            peerRef.current.setRemoteDescription(desc).then(() => {\r\n                userStream.current.getTracks().forEach(track => peerRef.current.addTrack(track, userStream.current));\r\n            }).then(() => {\r\n                return peerRef.current.createAnswer();\r\n            }).then(answer => {\r\n                return peerRef.current.setLocalDescription(answer);\r\n            }).then(() => {\r\n                const payload = {\r\n                    target: incoming.caller,\r\n                    caller: socketRef.current.id,\r\n                    sdp: peerRef.current.localDescription\r\n                }\r\n                socketRef.current.emit(\"answer\", payload);\r\n            })\r\n        }\r\n    \r\n        const handleAnswer=(message)=> {\r\n            const desc = new RTCSessionDescription(message.sdp);\r\n            peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\r\n        }\r\n    \r\n        const handleICECandidateEvent=(e)=> {\r\n            if (e.candidate) {\r\n                const payload = {\r\n                    target: otherUser.current,\r\n                    candidate: e.candidate,\r\n                }\r\n                socketRef.current.emit(\"ice-candidate\", payload);\r\n            }\r\n        }\r\n    \r\n        const handleNewICECandidateMsg=(incoming)=> {\r\n            const candidate = new RTCIceCandidate(incoming);\r\n    \r\n            peerRef.current.addIceCandidate(candidate)\r\n                .catch(e => console.log(e));\r\n        }\r\n    \r\n        const handleTrackEvent=(e)=> {\r\n            partnerVideo.current.srcObject = e.streams[0];\r\n        };\r\n    \r\n   try {\r\n    \r\n   \r\n        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            userStream.current = stream;\r\n\r\n            socketRef.current = io.connect(\"/\");\r\n            socketRef.current.emit(\"join room\", props.match.params.roomID);\r\n            console.log('room id',props.match.params.roomID);\r\n\r\n            socketRef.current.on('other user', userID => {\r\n                callUser(userID);\r\n                otherUser.current = userID;\r\n            });\r\n            \r\n\r\n            socketRef.current.on(\"user joined\", userID => {\r\n                otherUser.current = userID;\r\n            });\r\n\r\n            socketRef.current.on(\"offer\", handleRecieveCall);\r\n\r\n            socketRef.current.on(\"answer\", handleAnswer);\r\n\r\n            socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\r\n            \r\n        });\r\n    } catch (err) {\r\n        console.error(`${err.name}: ${err.message}`);\r\n    }\r\n        \r\n\r\n    },)[props.match.params.roomID];\r\n\r\n   \r\n    \r\n\r\n    const  shareScreen=() =>{\r\n        try {\r\n            \r\n        \r\n       \r\n            navigator.mediaDevices.getDisplayMedia({ cursor: true }).then(stream => {\r\n                const screenTrack = stream.getTracks()[0];\r\n                senders.current.find(sender => sender.track.kind === 'video').replaceTrack(screenTrack);\r\n                screenTrack.onended = function() {\r\n                    senders.current.find(sender => sender.track.kind === \"video\").replaceTrack(userStream.current.getTracks()[1]);\r\n                }\r\n            })\r\n        } catch (err    ) {\r\n        console.error(`${err.name}: ${err.message}`);\r\n            \r\n        }\r\n        \r\n     \r\n        \r\n        \r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <video controls style={{height: 500, width: 500}} autoPlay ref={userVideo} />\r\n            <video controls style={{height: 500, width: 500}} autoPlay ref={partnerVideo} />\r\n            <button onClick={shareScreen}>Share screen</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;"]},"metadata":{},"sourceType":"module"}