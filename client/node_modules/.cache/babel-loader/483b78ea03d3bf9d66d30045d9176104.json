{"ast":null,"code":"var _jsxFileName = \"C:\\\\react\\\\screen sharing\\\\screen-sharing-\\\\client\\\\src\\\\routes\\\\Room.js\";\nimport React, { useRef, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nconst Room = props => {\n  const userVideo = useRef();\n  const partnerVideo = useRef();\n  const peerRef = useRef();\n  const socketRef = useRef();\n  const otherUser = useRef();\n  const userStream = useRef();\n  const senders = useRef([]);\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true,\n      video: true\n    }).then(stream => {\n      userVideo.current.srcObject = stream;\n      userStream.current = stream;\n      socketRef.current = io.connect(\"/\");\n      socketRef.current.emit(\"join room\", props.match.params.roomID);\n      socketRef.current.on('other user', userID => {\n        callUser(userID);\n        otherUser.current = userID;\n      });\n      socketRef.current.on(\"user joined\", userID => {\n        otherUser.current = userID;\n      });\n      socketRef.current.on(\"offer\", handleRecieveCall);\n      socketRef.current.on(\"answer\", handleAnswer);\n      socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\n    });\n  }, []);\n\n  const callUser = userID => {\n    peerRef.current = createPeer(userID);\n    userStream.current.getTracks().forEach(track => senders.current.push(peerRef.current.addTrack(track, userStream.current)));\n  };\n\n  const createPeer = userID => {\n    const peer = new RTCPeerConnection({\n      iceServers: [{\n        urls: \"stun:stun.stunprotocol.org\"\n      }, {\n        urls: 'turn:numb.viagenie.ca',\n        credential: 'muazkh',\n        username: 'webrtc@live.com'\n      }]\n    });\n    peer.onicecandidate = handleICECandidateEvent;\n    peer.ontrack = handleTrackEvent;\n\n    peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\n\n    return peer;\n  };\n\n  const handleNegotiationNeededEvent = userID => {\n    peerRef.current.createOffer().then(offer => {\n      return peerRef.current.setLocalDescription(offer);\n    }).then(() => {\n      const payload = {\n        target: userID,\n        caller: socketRef.current.id,\n        sdp: peerRef.current.localDescription\n      };\n      socketRef.current.emit(\"offer\", payload);\n    }).catch(e => console.log(e));\n  };\n\n  const handleRecieveCall = incoming => {};\n\n  function handleAnswer(message) {\n    const desc = new RTCSessionDescription(message.sdp);\n    peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\n  }\n\n  function handleICECandidateEvent(e) {\n    if (e.candidate) {\n      const payload = {\n        target: otherUser.current,\n        candidate: e.candidate\n      };\n      socketRef.current.emit(\"ice-candidate\", payload);\n    }\n  }\n\n  function handleNewICECandidateMsg(incoming) {\n    const candidate = new RTCIceCandidate(incoming);\n    peerRef.current.addIceCandidate(candidate).catch(e => console.log(e));\n  }\n\n  function handleTrackEvent(e) {\n    partnerVideo.current.srcObject = e.streams[0];\n  }\n\n  ;\n\n  function shareScreen() {\n    navigator.mediaDevices.getDisplayMedia({\n      cursor: true\n    }).then(stream => {\n      const screenTrack = stream.getTracks()[0];\n      senders.current.find(sender => sender.track.kind === 'video').replaceTrack(screenTrack);\n\n      screenTrack.onended = function () {\n        senders.current.find(sender => sender.track.kind === \"video\").replaceTrack(userStream.current.getTracks()[1]);\n      };\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"video\", {\n    controls: true,\n    style: {\n      height: 500,\n      width: 500\n    },\n    autoPlay: true,\n    ref: userVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"video\", {\n    controls: true,\n    style: {\n      height: 500,\n      width: 500\n    },\n    autoPlay: true,\n    ref: partnerVideo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: shareScreen,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }, \"Share screen\"));\n};\n\nexport default Room;","map":{"version":3,"sources":["C:/react/screen sharing/screen-sharing-/client/src/routes/Room.js"],"names":["React","useRef","useEffect","io","Room","props","userVideo","partnerVideo","peerRef","socketRef","otherUser","userStream","senders","navigator","mediaDevices","getUserMedia","audio","video","then","stream","current","srcObject","connect","emit","match","params","roomID","on","userID","callUser","handleRecieveCall","handleAnswer","handleNewICECandidateMsg","createPeer","getTracks","forEach","track","push","addTrack","peer","RTCPeerConnection","iceServers","urls","credential","username","onicecandidate","handleICECandidateEvent","ontrack","handleTrackEvent","onnegotiationneeded","handleNegotiationNeededEvent","createOffer","offer","setLocalDescription","payload","target","caller","id","sdp","localDescription","catch","e","console","log","incoming","message","desc","RTCSessionDescription","setRemoteDescription","candidate","RTCIceCandidate","addIceCandidate","streams","shareScreen","getDisplayMedia","cursor","screenTrack","find","sender","kind","replaceTrack","onended","height","width"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport io from \"socket.io-client\";\r\n\r\nconst Room = (props) => {\r\n    const userVideo = useRef();\r\n    const partnerVideo = useRef();\r\n    const peerRef = useRef();\r\n    const socketRef = useRef();\r\n    const otherUser = useRef();\r\n    const userStream = useRef();\r\n    const senders = useRef([]);\r\n\r\n    useEffect(() => {\r\n        navigator.mediaDevices.getUserMedia({ audio: true, video: true }).then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            userStream.current = stream;\r\n\r\n            socketRef.current = io.connect(\"/\");\r\n            socketRef.current.emit(\"join room\", props.match.params.roomID);\r\n\r\n            socketRef.current.on('other user', userID => {\r\n                callUser(userID);\r\n                otherUser.current = userID;\r\n            });\r\n\r\n            socketRef.current.on(\"user joined\", userID => {\r\n                otherUser.current = userID;\r\n            });\r\n\r\n            socketRef.current.on(\"offer\", handleRecieveCall);\r\n\r\n            socketRef.current.on(\"answer\", handleAnswer);\r\n\r\n            socketRef.current.on(\"ice-candidate\", handleNewICECandidateMsg);\r\n        });\r\n\r\n    }, []);\r\n\r\n    const callUser=(userID)=> {\r\n        peerRef.current = createPeer(userID);\r\n        userStream.current.getTracks().forEach(track => senders.current.push(peerRef.current.addTrack(track, userStream.current)));\r\n    }\r\n\r\n    const createPeer=(userID)=> {\r\n        const peer = new RTCPeerConnection({\r\n            iceServers: [\r\n                {\r\n                    urls: \"stun:stun.stunprotocol.org\"\r\n                },\r\n                {\r\n                    urls: 'turn:numb.viagenie.ca',\r\n                    credential: 'muazkh',\r\n                    username: 'webrtc@live.com'\r\n                },\r\n            ]\r\n        });\r\n\r\n        peer.onicecandidate = handleICECandidateEvent;\r\n        peer.ontrack = handleTrackEvent;\r\n        peer.onnegotiationneeded = () => handleNegotiationNeededEvent(userID);\r\n\r\n        return peer;\r\n    }\r\n\r\n    const handleNegotiationNeededEvent=(userID)=> {\r\n        peerRef.current.createOffer().then(offer => {\r\n            return peerRef.current.setLocalDescription(offer);\r\n        }).then(() => {\r\n            const payload = {\r\n                target: userID,\r\n                caller: socketRef.current.id,\r\n                sdp: peerRef.current.localDescription\r\n            };\r\n            socketRef.current.emit(\"offer\", payload);\r\n        }).catch(e => console.log(e));\r\n    }\r\n\r\n    const handleRecieveCall=(incoming)=> {\r\n       \r\n    }\r\n\r\n    function handleAnswer(message) {\r\n        const desc = new RTCSessionDescription(message.sdp);\r\n        peerRef.current.setRemoteDescription(desc).catch(e => console.log(e));\r\n    }\r\n\r\n    function handleICECandidateEvent(e) {\r\n        if (e.candidate) {\r\n            const payload = {\r\n                target: otherUser.current,\r\n                candidate: e.candidate,\r\n            }\r\n            socketRef.current.emit(\"ice-candidate\", payload);\r\n        }\r\n    }\r\n\r\n    function handleNewICECandidateMsg(incoming) {\r\n        const candidate = new RTCIceCandidate(incoming);\r\n\r\n        peerRef.current.addIceCandidate(candidate)\r\n            .catch(e => console.log(e));\r\n    }\r\n\r\n    function handleTrackEvent(e) {\r\n        partnerVideo.current.srcObject = e.streams[0];\r\n    };\r\n\r\n    function shareScreen() {\r\n        navigator.mediaDevices.getDisplayMedia({ cursor: true }).then(stream => {\r\n            const screenTrack = stream.getTracks()[0];\r\n            senders.current.find(sender => sender.track.kind === 'video').replaceTrack(screenTrack);\r\n            screenTrack.onended = function() {\r\n                senders.current.find(sender => sender.track.kind === \"video\").replaceTrack(userStream.current.getTracks()[1]);\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <video controls style={{height: 500, width: 500}} autoPlay ref={userVideo} />\r\n            <video controls style={{height: 500, width: 500}} autoPlay ref={partnerVideo} />\r\n            <button onClick={shareScreen}>Share screen</button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;"]},"metadata":{},"sourceType":"module"}